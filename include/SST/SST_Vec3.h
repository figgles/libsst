/*  NEXT FILE  */
/* This is an AUTOGENERATED FILE generated from the bash script 'dumpheader.sh', last generated on Fri Apr 18 19:06:42 CDT 2014 */
#ifndef __SST_VEC3_H__
#define __SST_VEC3_H__
#include <SST/SST_Build.h>
#include <SST/SST_Vec3.h>
#include <pstdbool.h>

#if SST_COMPILER == SST_COMPILER_MSVC
#pragma warning(disable:4201)
#endif
#ifdef __cplusplus
extern "C" {
#endif
#define PAD 3 /* spaces it out to 4 * T for better alignment */
		typedef SST_ALIGN_PREFIX(16) union SST_Vec3f
		{
				float v[4];
				struct { float x, y, z, _pad; };
		} SST_ALIGN_SUFFIX(16) SST_Vec3f;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec3d
		{
				double v[4];
				struct { double x, y, z, _pad; };
		} SST_ALIGN_SUFFIX(16) SST_Vec3d;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec3i
		{
				int v[4];
				struct { int x, y, z, _pad; };
		} SST_ALIGN_SUFFIX(16) SST_Vec3i;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec3u
		{
				unsigned int v[4];
				struct { unsigned int x, y, z, _pad; };
		} SST_ALIGN_SUFFIX(16) SST_Vec3u;
#undef PAD

		/*##########################################################
		##  float 
		##########################################################*/
		void SST_Math_Vec3fAdd(const SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fAddLocal(SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B);
		void SST_Math_Vec3fSubtract(const SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fSubtractLocal(SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B);
		void SST_Math_Vec3fMultiply(const SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fMultiplyLocal(SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B);
		void SST_Math_Vec3fScale(const SST_Vec3f* RESTRICT _A,  const float k, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fScaleLocal(SST_Vec3f* RESTRICT _A, const float k);
		void SST_Math_Vec3fDivide(const SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fDivideLocal(SST_Vec3f* RESTRICT _A, const SST_Vec3f* RESTRICT _B);
		void SST_Math_Vec3fAddMult(const SST_Vec3f* RESTRICT _X, const float _x, const SST_Vec3f* RESTRICT _Y, SST_Vec3f* RESTRICT _Z);
		void SST_Math_Vec3fAddMultLocal(SST_Vec3f* RESTRICT _X, const float _x, const SST_Vec3f* RESTRICT _Y);
		void SST_Math_Vec3fLerp(const SST_Vec3f* RESTRICT _X, const SST_Vec3f* RESTRICT _Y, const float _y, SST_Vec3f* RESTRICT _Z);
		void SST_Math_Vec3fLerpLocal(SST_Vec3f* RESTRICT _X, const SST_Vec3f* RESTRICT _Y, const float _y);
		void SST_Math_Vec3fWeightedSum(const SST_Vec3f* RESTRICT _X, const float _x, const SST_Vec3f* RESTRICT _Y, const float _y, SST_Vec3f* RESTRICT _Z);
		void SST_Math_Vec3fWeightedSumLocal(SST_Vec3f* RESTRICT _X, const float _x, const SST_Vec3f* RESTRICT _Y, const float _y);
		bool SST_Math_Vec3fEquals(const SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _b, const float _tolerance);
		float SST_Math_Vec3fMax(const SST_Vec3f* RESTRICT _a);
		float SST_Math_Vec3fMin(const SST_Vec3f* RESTRICT _a);
		void SST_Math_Vec3fCross(const SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _b, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fCrossLocal(SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _b);
		void SST_Math_Vec3fRotateAbout(const SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _about,float _theta, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fRotateAboutLocal(SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _about,float _theta);
		void SST_Math_Vec3fRotate(const SST_Vec3f* RESTRICT _a,float _theta, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fRotateLocal(SST_Vec3f* RESTRICT _a, float _theta);
		void SST_Math_Vec3fNormalize(const SST_Vec3f* RESTRICT _in, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fNormalizeLocal(SST_Vec3f* _inout);
		void SST_Math_Vec3fRecipSqrt(const SST_Vec3f* RESTRICT _in, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fRecipSqrtLocal(SST_Vec3f* RESTRICT _a);
		void SST_Math_Vec3fSqrt(const SST_Vec3f* RESTRICT _in, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fSqrtLocal(SST_Vec3f* RESTRICT _a);
		float SST_Math_Vec3fMagnitude(const SST_Vec3f* RESTRICT _a);
		void SST_Math_Vec3fAbs(const SST_Vec3f* RESTRICT _in, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fAbsLocal(SST_Vec3f* RESTRICT _a);
		void SST_Math_Vec3fNegate(const SST_Vec3f* RESTRICT _in, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fNegateLocal(SST_Vec3f* RESTRICT _a);
		void SST_Math_Vec3fRecip(const SST_Vec3f* RESTRICT _in, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fRecipLocal(SST_Vec3f* RESTRICT _a);
		float SST_Math_Vec3fDot(const SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _b);
		float SST_Math_Vec3fMagnitudeSquared(const SST_Vec3f* RESTRICT _a);
		void SST_Math_Vec3fProject(const SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _b, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fProjectLocal(SST_Vec3f* RESTRICT _a, const SST_Vec3f* RESTRICT _b);
		void SST_Math_Vec3fBias(const SST_Vec3f* RESTRICT _a, const float _bias, SST_Vec3f* RESTRICT _out);
		void SST_Math_Vec3fBiasLocal(SST_Vec3f* RESTRICT _a, const float _bias);

		/*##########################################################
		##  double 
		##########################################################*/
		void SST_Math_Vec3dAdd(const SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dAddLocal(SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B);
		void SST_Math_Vec3dSubtract(const SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dSubtractLocal(SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B);
		void SST_Math_Vec3dMultiply(const SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dMultiplyLocal(SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B);
		void SST_Math_Vec3dScale(const SST_Vec3d* RESTRICT _A,  const double k, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dScaleLocal(SST_Vec3d* RESTRICT _A, const double k);
		void SST_Math_Vec3dDivide(const SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dDivideLocal(SST_Vec3d* RESTRICT _A, const SST_Vec3d* RESTRICT _B);
		void SST_Math_Vec3dAddMult(const SST_Vec3d* RESTRICT _X, const double _x, const SST_Vec3d* RESTRICT _Y, SST_Vec3d* RESTRICT _Z);
		void SST_Math_Vec3dAddMultLocal(SST_Vec3d* RESTRICT _X, const double _x, const SST_Vec3d* RESTRICT _Y);
		void SST_Math_Vec3dLerp(const SST_Vec3d* RESTRICT _X, const SST_Vec3d* RESTRICT _Y, const double _y, SST_Vec3d* RESTRICT _Z);
		void SST_Math_Vec3dLerpLocal(SST_Vec3d* RESTRICT _X, const SST_Vec3d* RESTRICT _Y, const double _y);
		void SST_Math_Vec3dWeightedSum(const SST_Vec3d* RESTRICT _X, const double _x, const SST_Vec3d* RESTRICT _Y, const double _y, SST_Vec3d* RESTRICT _Z);
		void SST_Math_Vec3dWeightedSumLocal(SST_Vec3d* RESTRICT _X, const double _x, const SST_Vec3d* RESTRICT _Y, const double _y);
		bool SST_Math_Vec3dEquals(const SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _b, const double _tolerance);
		double SST_Math_Vec3dMax(const SST_Vec3d* RESTRICT _a);
		double SST_Math_Vec3dMin(const SST_Vec3d* RESTRICT _a);
		void SST_Math_Vec3dCross(const SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _b, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dCrossLocal(SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _b);
		void SST_Math_Vec3dRotateAbout(const SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _about,double _theta, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dRotateAboutLocal(SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _about,double _theta);
		void SST_Math_Vec3dRotate(const SST_Vec3d* RESTRICT _a,double _theta, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dRotateLocal(SST_Vec3d* RESTRICT _a, double _theta);
		void SST_Math_Vec3dNormalize(const SST_Vec3d* RESTRICT _in, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dNormalizeLocal(SST_Vec3d* _inout);
		void SST_Math_Vec3dRecipSqrt(const SST_Vec3d* RESTRICT _in, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dRecipSqrtLocal(SST_Vec3d* RESTRICT _a);
		void SST_Math_Vec3dSqrt(const SST_Vec3d* RESTRICT _in, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dSqrtLocal(SST_Vec3d* RESTRICT _a);
		double SST_Math_Vec3dMagnitude(const SST_Vec3d* RESTRICT _a);
		void SST_Math_Vec3dAbs(const SST_Vec3d* RESTRICT _in, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dAbsLocal(SST_Vec3d* RESTRICT _a);
		void SST_Math_Vec3dNegate(const SST_Vec3d* RESTRICT _in, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dNegateLocal(SST_Vec3d* RESTRICT _a);
		void SST_Math_Vec3dRecip(const SST_Vec3d* RESTRICT _in, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dRecipLocal(SST_Vec3d* RESTRICT _a);
		double SST_Math_Vec3dDot(const SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _b);
		double SST_Math_Vec3dMagnitudeSquared(const SST_Vec3d* RESTRICT _a);
		void SST_Math_Vec3dProject(const SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _b, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dProjectLocal(SST_Vec3d* RESTRICT _a, const SST_Vec3d* RESTRICT _b);
		void SST_Math_Vec3dBias(const SST_Vec3d* RESTRICT _a, const double _bias, SST_Vec3d* RESTRICT _out);
		void SST_Math_Vec3dBiasLocal(SST_Vec3d* RESTRICT _a, const double _bias);

		/*##########################################################
		##  int 
		##########################################################*/
		void SST_Math_Vec3iAdd(const SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iAddLocal(SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B);
		void SST_Math_Vec3iSubtract(const SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iSubtractLocal(SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B);
		void SST_Math_Vec3iMultiply(const SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iMultiplyLocal(SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B);
		void SST_Math_Vec3iScale(const SST_Vec3i* RESTRICT _A,  const int k, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iScaleLocal(SST_Vec3i* RESTRICT _A, const int k);
		void SST_Math_Vec3iDivide(const SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iDivideLocal(SST_Vec3i* RESTRICT _A, const SST_Vec3i* RESTRICT _B);
		void SST_Math_Vec3iAddMult(const SST_Vec3i* RESTRICT _X, const int _x, const SST_Vec3i* RESTRICT _Y, SST_Vec3i* RESTRICT _Z);
		void SST_Math_Vec3iAddMultLocal(SST_Vec3i* RESTRICT _X, const int _x, const SST_Vec3i* RESTRICT _Y);
		void SST_Math_Vec3iLerp(const SST_Vec3i* RESTRICT _X, const SST_Vec3i* RESTRICT _Y, const int _y, SST_Vec3i* RESTRICT _Z);
		void SST_Math_Vec3iLerpLocal(SST_Vec3i* RESTRICT _X, const SST_Vec3i* RESTRICT _Y, const int _y);
		void SST_Math_Vec3iWeightedSum(const SST_Vec3i* RESTRICT _X, const int _x, const SST_Vec3i* RESTRICT _Y, const int _y, SST_Vec3i* RESTRICT _Z);
		void SST_Math_Vec3iWeightedSumLocal(SST_Vec3i* RESTRICT _X, const int _x, const SST_Vec3i* RESTRICT _Y, const int _y);
		bool SST_Math_Vec3iEquals(const SST_Vec3i* RESTRICT _a, const SST_Vec3i* RESTRICT _b);
		int SST_Math_Vec3iMax(const SST_Vec3i* RESTRICT _a);
		int SST_Math_Vec3iMin(const SST_Vec3i* RESTRICT _a);
		void SST_Math_Vec3iAbs(const SST_Vec3i* RESTRICT _in, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iAbsLocal(SST_Vec3i* RESTRICT _a);
		void SST_Math_Vec3iNegate(const SST_Vec3i* RESTRICT _in, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iNegateLocal(SST_Vec3i* RESTRICT _a);
		void SST_Math_Vec3iRecip(const SST_Vec3i* RESTRICT _in, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iRecipLocal(SST_Vec3i* RESTRICT _a);
		int SST_Math_Vec3iDot(const SST_Vec3i* RESTRICT _a, const SST_Vec3i* RESTRICT _b);
		int SST_Math_Vec3iMagnitudeSquared(const SST_Vec3i* RESTRICT _a);
		void SST_Math_Vec3iProject(const SST_Vec3i* RESTRICT _a, const SST_Vec3i* RESTRICT _b, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iProjectLocal(SST_Vec3i* RESTRICT _a, const SST_Vec3i* RESTRICT _b);
		void SST_Math_Vec3iBias(const SST_Vec3i* RESTRICT _a, const int _bias, SST_Vec3i* RESTRICT _out);
		void SST_Math_Vec3iBiasLocal(SST_Vec3i* RESTRICT _a, const int _bias);

		/*##########################################################
		##  unsigned int
		##########################################################*/
		void SST_Math_Vec3uAdd(const SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B, SST_Vec3u* RESTRICT _out);
		void SST_Math_Vec3uAddLocal(SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B);
		void SST_Math_Vec3uSubtract(const SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B, SST_Vec3u* RESTRICT _out);
		void SST_Math_Vec3uSubtractLocal(SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B);
		void SST_Math_Vec3uMultiply(const SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B, SST_Vec3u* RESTRICT _out);
		void SST_Math_Vec3uMultiplyLocal(SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B);
		void SST_Math_Vec3uScale(const SST_Vec3u* RESTRICT _A,  const unsigned int k, SST_Vec3u* RESTRICT _out);
		void SST_Math_Vec3uScaleLocal(SST_Vec3u* RESTRICT _A, const unsigned int k);
		void SST_Math_Vec3uDivide(const SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B, SST_Vec3u* RESTRICT _out);
		void SST_Math_Vec3uDivideLocal(SST_Vec3u* RESTRICT _A, const SST_Vec3u* RESTRICT _B);
		void SST_Math_Vec3uAddMult(const SST_Vec3u* RESTRICT _X, const unsigned int _x, const SST_Vec3u* RESTRICT _Y, SST_Vec3u* RESTRICT _Z);
		void SST_Math_Vec3uAddMultLocal(SST_Vec3u* RESTRICT _X, const unsigned int _x, const SST_Vec3u* RESTRICT _Y);
		void SST_Math_Vec3uLerp(const SST_Vec3u* RESTRICT _X, const SST_Vec3u* RESTRICT _Y, const unsigned int _y, SST_Vec3u* RESTRICT _Z);
		void SST_Math_Vec3uLerpLocal(SST_Vec3u* RESTRICT _X, const SST_Vec3u* RESTRICT _Y, const unsigned int _y);
		void SST_Math_Vec3uWeightedSum(const SST_Vec3u* RESTRICT _X, const unsigned int _x, const SST_Vec3u* RESTRICT _Y, const unsigned int _y, SST_Vec3u* RESTRICT _Z);
		void SST_Math_Vec3uWeightedSumLocal(SST_Vec3u* RESTRICT _X, const unsigned int _x, const SST_Vec3u* RESTRICT _Y, const unsigned int _y);
		bool SST_Math_Vec3uEquals(const SST_Vec3u* RESTRICT _a, const SST_Vec3u* RESTRICT _b);
		unsigned int SST_Math_Vec3uMax(const SST_Vec3u* RESTRICT _a);
		unsigned int SST_Math_Vec3uMin(const SST_Vec3u* RESTRICT _a);
		unsigned int SST_Math_Vec3uDot(const SST_Vec3u* RESTRICT _a, const SST_Vec3u* RESTRICT _b);
		unsigned int SST_Math_Vec3uMagnitudeSquared(const SST_Vec3u* RESTRICT _a);
		void SST_Math_Vec3uProject(const SST_Vec3u* RESTRICT _a, const SST_Vec3u* RESTRICT _b, SST_Vec3u* RESTRICT _out);
		void SST_Math_Vec3uProjectLocal(SST_Vec3u* RESTRICT _a, const SST_Vec3u* RESTRICT _b);
		void SST_Math_Vec3uBias(const SST_Vec3u* RESTRICT _a, const unsigned int _bias, SST_Vec3u* RESTRICT _out);
		void SST_Math_Vec3uBiasLocal(SST_Vec3u* RESTRICT _a, const unsigned int _bias);
#ifdef __cplusplus
}
#endif
#if SST_COMPILER == SST_COMPILER_MSVC
#pragma warning(default:4201)
#endif
#endif
