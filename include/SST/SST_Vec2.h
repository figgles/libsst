/*  NEXT FILE  */
/* This is an AUTOGENERATED FILE generated from the bash script 'dump_VecN_headers.sh', last generated on Fri Apr 18 19:06:42 CDT 2014  */
#ifndef __SST_VEC2_H__
#define __SST_VEC2_H__
#include <SST/SST_Build.h>
#include <SST/SST_Vec2.h>
#include <pstdbool.h>

#if SST_COMPILER == SST_COMPILER_MSVC
#pragma warning(disable:4201)
#endif
#ifdef __cplusplus
extern "C" {
#endif
		typedef SST_ALIGN_PREFIX(16) union SST_Vec2f
		{
				float v[2];
				struct { float x, y; };
		} SST_ALIGN_SUFFIX(16) SST_Vec2f;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec2d
		{
				double v[2];
				struct { double x, y; };
		} SST_ALIGN_SUFFIX(16) SST_Vec2d;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec2i
		{
				int v[2];
				struct { int x, y; };
		} SST_ALIGN_SUFFIX(16) SST_Vec2i;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec2u
		{
				unsigned int v[2];
				struct { unsigned int x, y; };
		} SST_ALIGN_SUFFIX(16) SST_Vec2u;

		/*##########################################################
		##  float 
		##########################################################*/
		void SST_Math_Vec2fAdd(const SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fAddLocal(SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B);
		void SST_Math_Vec2fSubtract(const SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fSubtractLocal(SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B);
		void SST_Math_Vec2fMultiply(const SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fMultiplyLocal(SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B);
		void SST_Math_Vec2fScale(const SST_Vec2f* RESTRICT _A,  const float k, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fScaleLocal(SST_Vec2f* RESTRICT _A, const float k);
		void SST_Math_Vec2fDivide(const SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fDivideLocal(SST_Vec2f* RESTRICT _A, const SST_Vec2f* RESTRICT _B);
		void SST_Math_Vec2fAddMult(const SST_Vec2f* RESTRICT _X, const float _x, const SST_Vec2f* RESTRICT _Y, SST_Vec2f* RESTRICT _Z);
		void SST_Math_Vec2fAddMultLocal(SST_Vec2f* RESTRICT _X, const float _x, const SST_Vec2f* RESTRICT _Y);
		void SST_Math_Vec2fLerp(const SST_Vec2f* RESTRICT _X, const SST_Vec2f* RESTRICT _Y, const float _y, SST_Vec2f* RESTRICT _Z);
		void SST_Math_Vec2fLerpLocal(SST_Vec2f* RESTRICT _X, const SST_Vec2f* RESTRICT _Y, const float _y);
		void SST_Math_Vec2fWeightedSum(const SST_Vec2f* RESTRICT _X, const float _x, const SST_Vec2f* RESTRICT _Y, const float _y, SST_Vec2f* RESTRICT _Z);
		void SST_Math_Vec2fWeightedSumLocal(SST_Vec2f* RESTRICT _X, const float _x, const SST_Vec2f* RESTRICT _Y, const float _y);
		bool SST_Math_Vec2fEquals(const SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _b, const float _tolerance);
		float SST_Math_Vec2fMax(const SST_Vec2f* RESTRICT _a);
		float SST_Math_Vec2fMin(const SST_Vec2f* RESTRICT _a);
		void SST_Math_Vec2fCross(const SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _b, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fCrossLocal(SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _b);
		void SST_Math_Vec2fRotateAbout(const SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _about,float _theta, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fRotateAboutLocal(SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _about,float _theta);
		void SST_Math_Vec2fRotate(const SST_Vec2f* RESTRICT _a,float _theta, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fRotateLocal(SST_Vec2f* RESTRICT _a, float _theta);
		void SST_Math_Vec2fNormalize(const SST_Vec2f* RESTRICT _in, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fNormalizeLocal(SST_Vec2f* _inout);
		void SST_Math_Vec2fRecipSqrt(const SST_Vec2f* RESTRICT _in, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fRecipSqrtLocal(SST_Vec2f* RESTRICT _a);
		void SST_Math_Vec2fSqrt(const SST_Vec2f* RESTRICT _in, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fSqrtLocal(SST_Vec2f* RESTRICT _a);
		float SST_Math_Vec2fMagnitude(const SST_Vec2f* RESTRICT _a);
		void SST_Math_Vec2fAbs(const SST_Vec2f* RESTRICT _in, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fAbsLocal(SST_Vec2f* RESTRICT _a);
		void SST_Math_Vec2fNegate(const SST_Vec2f* RESTRICT _in, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fNegateLocal(SST_Vec2f* RESTRICT _a);
		void SST_Math_Vec2fRecip(const SST_Vec2f* RESTRICT _in, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fRecipLocal(SST_Vec2f* RESTRICT _a);
		float SST_Math_Vec2fDot(const SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _b);
		float SST_Math_Vec2fMagnitudeSquared(const SST_Vec2f* RESTRICT _a);
		void SST_Math_Vec2fProject(const SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _b, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fProjectLocal(SST_Vec2f* RESTRICT _a, const SST_Vec2f* RESTRICT _b);
		void SST_Math_Vec2fBias(const SST_Vec2f* RESTRICT _a, const float _bias, SST_Vec2f* RESTRICT _out);
		void SST_Math_Vec2fBiasLocal(SST_Vec2f* RESTRICT _a, const float _bias);

		/*##########################################################
		##  double 
		##########################################################*/
		void SST_Math_Vec2dAdd(const SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dAddLocal(SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B);
		void SST_Math_Vec2dSubtract(const SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dSubtractLocal(SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B);
		void SST_Math_Vec2dMultiply(const SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dMultiplyLocal(SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B);
		void SST_Math_Vec2dScale(const SST_Vec2d* RESTRICT _A,  const double k, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dScaleLocal(SST_Vec2d* RESTRICT _A, const double k);
		void SST_Math_Vec2dDivide(const SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dDivideLocal(SST_Vec2d* RESTRICT _A, const SST_Vec2d* RESTRICT _B);
		void SST_Math_Vec2dAddMult(const SST_Vec2d* RESTRICT _X, const double _x, const SST_Vec2d* RESTRICT _Y, SST_Vec2d* RESTRICT _Z);
		void SST_Math_Vec2dAddMultLocal(SST_Vec2d* RESTRICT _X, const double _x, const SST_Vec2d* RESTRICT _Y);
		void SST_Math_Vec2dLerp(const SST_Vec2d* RESTRICT _X, const SST_Vec2d* RESTRICT _Y, const double _y, SST_Vec2d* RESTRICT _Z);
		void SST_Math_Vec2dLerpLocal(SST_Vec2d* RESTRICT _X, const SST_Vec2d* RESTRICT _Y, const double _y);
		void SST_Math_Vec2dWeightedSum(const SST_Vec2d* RESTRICT _X, const double _x, const SST_Vec2d* RESTRICT _Y, const double _y, SST_Vec2d* RESTRICT _Z);
		void SST_Math_Vec2dWeightedSumLocal(SST_Vec2d* RESTRICT _X, const double _x, const SST_Vec2d* RESTRICT _Y, const double _y);
		bool SST_Math_Vec2dEquals(const SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _b, const double _tolerance);
		double SST_Math_Vec2dMax(const SST_Vec2d* RESTRICT _a);
		double SST_Math_Vec2dMin(const SST_Vec2d* RESTRICT _a);
		void SST_Math_Vec2dCross(const SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _b, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dCrossLocal(SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _b);
		void SST_Math_Vec2dRotateAbout(const SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _about,double _theta, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dRotateAboutLocal(SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _about,double _theta);
		void SST_Math_Vec2dRotate(const SST_Vec2d* RESTRICT _a,double _theta, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dRotateLocal(SST_Vec2d* RESTRICT _a, double _theta);
		void SST_Math_Vec2dNormalize(const SST_Vec2d* RESTRICT _in, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dNormalizeLocal(SST_Vec2d* _inout);
		void SST_Math_Vec2dRecipSqrt(const SST_Vec2d* RESTRICT _in, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dRecipSqrtLocal(SST_Vec2d* RESTRICT _a);
		void SST_Math_Vec2dSqrt(const SST_Vec2d* RESTRICT _in, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dSqrtLocal(SST_Vec2d* RESTRICT _a);
		double SST_Math_Vec2dMagnitude(const SST_Vec2d* RESTRICT _a);
		void SST_Math_Vec2dAbs(const SST_Vec2d* RESTRICT _in, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dAbsLocal(SST_Vec2d* RESTRICT _a);
		void SST_Math_Vec2dNegate(const SST_Vec2d* RESTRICT _in, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dNegateLocal(SST_Vec2d* RESTRICT _a);
		void SST_Math_Vec2dRecip(const SST_Vec2d* RESTRICT _in, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dRecipLocal(SST_Vec2d* RESTRICT _a);
		double SST_Math_Vec2dDot(const SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _b);
		double SST_Math_Vec2dMagnitudeSquared(const SST_Vec2d* RESTRICT _a);
		void SST_Math_Vec2dProject(const SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _b, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dProjectLocal(SST_Vec2d* RESTRICT _a, const SST_Vec2d* RESTRICT _b);
		void SST_Math_Vec2dBias(const SST_Vec2d* RESTRICT _a, const double _bias, SST_Vec2d* RESTRICT _out);
		void SST_Math_Vec2dBiasLocal(SST_Vec2d* RESTRICT _a, const double _bias);

		/*##########################################################
		##  int 
		##########################################################*/
		void SST_Math_Vec2iAdd(const SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iAddLocal(SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B);
		void SST_Math_Vec2iSubtract(const SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iSubtractLocal(SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B);
		void SST_Math_Vec2iMultiply(const SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iMultiplyLocal(SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B);
		void SST_Math_Vec2iScale(const SST_Vec2i* RESTRICT _A,  const int k, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iScaleLocal(SST_Vec2i* RESTRICT _A, const int k);
		void SST_Math_Vec2iDivide(const SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iDivideLocal(SST_Vec2i* RESTRICT _A, const SST_Vec2i* RESTRICT _B);
		void SST_Math_Vec2iAddMult(const SST_Vec2i* RESTRICT _X, const int _x, const SST_Vec2i* RESTRICT _Y, SST_Vec2i* RESTRICT _Z);
		void SST_Math_Vec2iAddMultLocal(SST_Vec2i* RESTRICT _X, const int _x, const SST_Vec2i* RESTRICT _Y);
		void SST_Math_Vec2iLerp(const SST_Vec2i* RESTRICT _X, const SST_Vec2i* RESTRICT _Y, const int _y, SST_Vec2i* RESTRICT _Z);
		void SST_Math_Vec2iLerpLocal(SST_Vec2i* RESTRICT _X, const SST_Vec2i* RESTRICT _Y, const int _y);
		void SST_Math_Vec2iWeightedSum(const SST_Vec2i* RESTRICT _X, const int _x, const SST_Vec2i* RESTRICT _Y, const int _y, SST_Vec2i* RESTRICT _Z);
		void SST_Math_Vec2iWeightedSumLocal(SST_Vec2i* RESTRICT _X, const int _x, const SST_Vec2i* RESTRICT _Y, const int _y);
		bool SST_Math_Vec2iEquals(const SST_Vec2i* RESTRICT _a, const SST_Vec2i* RESTRICT _b);
		int SST_Math_Vec2iMax(const SST_Vec2i* RESTRICT _a);
		int SST_Math_Vec2iMin(const SST_Vec2i* RESTRICT _a);
		void SST_Math_Vec2iAbs(const SST_Vec2i* RESTRICT _in, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iAbsLocal(SST_Vec2i* RESTRICT _a);
		void SST_Math_Vec2iNegate(const SST_Vec2i* RESTRICT _in, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iNegateLocal(SST_Vec2i* RESTRICT _a);
		void SST_Math_Vec2iRecip(const SST_Vec2i* RESTRICT _in, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iRecipLocal(SST_Vec2i* RESTRICT _a);
		int SST_Math_Vec2iDot(const SST_Vec2i* RESTRICT _a, const SST_Vec2i* RESTRICT _b);
		int SST_Math_Vec2iMagnitudeSquared(const SST_Vec2i* RESTRICT _a);
		void SST_Math_Vec2iProject(const SST_Vec2i* RESTRICT _a, const SST_Vec2i* RESTRICT _b, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iProjectLocal(SST_Vec2i* RESTRICT _a, const SST_Vec2i* RESTRICT _b);
		void SST_Math_Vec2iBias(const SST_Vec2i* RESTRICT _a, const int _bias, SST_Vec2i* RESTRICT _out);
		void SST_Math_Vec2iBiasLocal(SST_Vec2i* RESTRICT _a, const int _bias);

		/*##########################################################
		##  unsigned int
		##########################################################*/
		void SST_Math_Vec2uAdd(const SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B, SST_Vec2u* RESTRICT _out);
		void SST_Math_Vec2uAddLocal(SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B);
		void SST_Math_Vec2uSubtract(const SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B, SST_Vec2u* RESTRICT _out);
		void SST_Math_Vec2uSubtractLocal(SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B);
		void SST_Math_Vec2uMultiply(const SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B, SST_Vec2u* RESTRICT _out);
		void SST_Math_Vec2uMultiplyLocal(SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B);
		void SST_Math_Vec2uScale(const SST_Vec2u* RESTRICT _A,  const unsigned int k, SST_Vec2u* RESTRICT _out);
		void SST_Math_Vec2uScaleLocal(SST_Vec2u* RESTRICT _A, const unsigned int k);
		void SST_Math_Vec2uDivide(const SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B, SST_Vec2u* RESTRICT _out);
		void SST_Math_Vec2uDivideLocal(SST_Vec2u* RESTRICT _A, const SST_Vec2u* RESTRICT _B);
		void SST_Math_Vec2uAddMult(const SST_Vec2u* RESTRICT _X, const unsigned int _x, const SST_Vec2u* RESTRICT _Y, SST_Vec2u* RESTRICT _Z);
		void SST_Math_Vec2uAddMultLocal(SST_Vec2u* RESTRICT _X, const unsigned int _x, const SST_Vec2u* RESTRICT _Y);
		void SST_Math_Vec2uLerp(const SST_Vec2u* RESTRICT _X, const SST_Vec2u* RESTRICT _Y, const unsigned int _y, SST_Vec2u* RESTRICT _Z);
		void SST_Math_Vec2uLerpLocal(SST_Vec2u* RESTRICT _X, const SST_Vec2u* RESTRICT _Y, const unsigned int _y);
		void SST_Math_Vec2uWeightedSum(const SST_Vec2u* RESTRICT _X, const unsigned int _x, const SST_Vec2u* RESTRICT _Y, const unsigned int _y, SST_Vec2u* RESTRICT _Z);
		void SST_Math_Vec2uWeightedSumLocal(SST_Vec2u* RESTRICT _X, const unsigned int _x, const SST_Vec2u* RESTRICT _Y, const unsigned int _y);
		bool SST_Math_Vec2uEquals(const SST_Vec2u* RESTRICT _a, const SST_Vec2u* RESTRICT _b);
		unsigned int SST_Math_Vec2uMax(const SST_Vec2u* RESTRICT _a);
		unsigned int SST_Math_Vec2uMin(const SST_Vec2u* RESTRICT _a);
		unsigned int SST_Math_Vec2uDot(const SST_Vec2u* RESTRICT _a, const SST_Vec2u* RESTRICT _b);
		unsigned int SST_Math_Vec2uMagnitudeSquared(const SST_Vec2u* RESTRICT _a);
		void SST_Math_Vec2uProject(const SST_Vec2u* RESTRICT _a, const SST_Vec2u* RESTRICT _b, SST_Vec2u* RESTRICT _out);
		void SST_Math_Vec2uProjectLocal(SST_Vec2u* RESTRICT _a, const SST_Vec2u* RESTRICT _b);
		void SST_Math_Vec2uBias(const SST_Vec2u* RESTRICT _a, const unsigned int _bias, SST_Vec2u* RESTRICT _out);
		void SST_Math_Vec2uBiasLocal(SST_Vec2u* RESTRICT _a, const unsigned int _bias);
#ifdef __cplusplus
}
#endif
#if SST_COMPILER == SST_COMPILER_MSVC
#pragma warning(default:4201)
#endif
#endif
