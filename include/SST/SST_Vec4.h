/*  NEXT FILE  */
/* This is an AUTOGENERATED FILE generated from the bash script 'dumpheader.sh', last generated on Fri Apr 18 19:06:42 CDT 2014 */
#ifndef __SST_VEC4_H__
#define __SST_VEC4_H__
#include <SST/SST_Build.h>
#include <SST/SST_Vec4.h>
#include <pstdbool.h>

#if SST_COMPILER == SST_COMPILER_MSVC
#pragma warning(disable:4201)
#endif
#ifdef __cplusplus
extern "C" {
#endif

		typedef SST_ALIGN_PREFIX(16) union SST_Vec4f
		{
				float v[4];
				struct { float x, y, z, w; };
		} SST_ALIGN_SUFFIX(16) SST_Vec4f;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec4d
		{
				double v[4];
				struct { double x, y, z, w; };
		} SST_ALIGN_SUFFIX(16) SST_Vec4d;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec4i
		{
				int v[4];
				struct { int x, y, z, w; };
		} SST_ALIGN_SUFFIX(16) SST_Vec4i;

		typedef SST_ALIGN_PREFIX(16) union SST_Vec4u
		{
				unsigned int v[4];
				struct { unsigned int x, y, z, w; };
		} SST_ALIGN_SUFFIX(16) SST_Vec4u;

		/*##########################################################
		##  float 
		##########################################################*/
		void SST_Math_Vec4fAdd(const SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fAddLocal(SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B);
		void SST_Math_Vec4fSubtract(const SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fSubtractLocal(SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B);
		void SST_Math_Vec4fMultiply(const SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fMultiplyLocal(SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B);
		void SST_Math_Vec4fScale(const SST_Vec4f* RESTRICT _A,  const float k, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fScaleLocal(SST_Vec4f* RESTRICT _A, const float k);
		void SST_Math_Vec4fDivide(const SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fDivideLocal(SST_Vec4f* RESTRICT _A, const SST_Vec4f* RESTRICT _B);
		void SST_Math_Vec4fAddMult(const SST_Vec4f* RESTRICT _X, const float _x, const SST_Vec4f* RESTRICT _Y, SST_Vec4f* RESTRICT _Z);
		void SST_Math_Vec4fAddMultLocal(SST_Vec4f* RESTRICT _X, const float _x, const SST_Vec4f* RESTRICT _Y);
		void SST_Math_Vec4fLerp(const SST_Vec4f* RESTRICT _X, const SST_Vec4f* RESTRICT _Y, const float _y, SST_Vec4f* RESTRICT _Z);
		void SST_Math_Vec4fLerpLocal(SST_Vec4f* RESTRICT _X, const SST_Vec4f* RESTRICT _Y, const float _y);
		void SST_Math_Vec4fWeightedSum(const SST_Vec4f* RESTRICT _X, const float _x, const SST_Vec4f* RESTRICT _Y, const float _y, SST_Vec4f* RESTRICT _Z);
		void SST_Math_Vec4fWeightedSumLocal(SST_Vec4f* RESTRICT _X, const float _x, const SST_Vec4f* RESTRICT _Y, const float _y);
		bool SST_Math_Vec4fEquals(const SST_Vec4f* RESTRICT _a, const SST_Vec4f* RESTRICT _b, const float _tolerance);
		float SST_Math_Vec4fMax(const SST_Vec4f* RESTRICT _a);
		float SST_Math_Vec4fMin(const SST_Vec4f* RESTRICT _a);
		void SST_Math_Vec4fNormalize(const SST_Vec4f* RESTRICT _in, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fNormalizeLocal(SST_Vec4f* _inout);
		void SST_Math_Vec4fRecipSqrt(const SST_Vec4f* RESTRICT _in, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fRecipSqrtLocal(SST_Vec4f* RESTRICT _a);
		void SST_Math_Vec4fSqrt(const SST_Vec4f* RESTRICT _in, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fSqrtLocal(SST_Vec4f* RESTRICT _a);
		float SST_Math_Vec4fMagnitude(const SST_Vec4f* RESTRICT _a);
		void SST_Math_Vec4fAbs(const SST_Vec4f* RESTRICT _in, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fAbsLocal(SST_Vec4f* RESTRICT _a);
		void SST_Math_Vec4fNegate(const SST_Vec4f* RESTRICT _in, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fNegateLocal(SST_Vec4f* RESTRICT _a);
		void SST_Math_Vec4fRecip(const SST_Vec4f* RESTRICT _in, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fRecipLocal(SST_Vec4f* RESTRICT _a);
		float SST_Math_Vec4fDot(const SST_Vec4f* RESTRICT _a, const SST_Vec4f* RESTRICT _b);
		float SST_Math_Vec4fMagnitudeSquared(const SST_Vec4f* RESTRICT _a);
		void SST_Math_Vec4fProject(const SST_Vec4f* RESTRICT _a, const SST_Vec4f* RESTRICT _b, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fProjectLocal(SST_Vec4f* RESTRICT _a, const SST_Vec4f* RESTRICT _b);
		void SST_Math_Vec4fBias(const SST_Vec4f* RESTRICT _a, const float _bias, SST_Vec4f* RESTRICT _out);
		void SST_Math_Vec4fBiasLocal(SST_Vec4f* RESTRICT _a, const float _bias);

		/*##########################################################
		##  double 
		##########################################################*/
		void SST_Math_Vec4dAdd(const SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dAddLocal(SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B);
		void SST_Math_Vec4dSubtract(const SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dSubtractLocal(SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B);
		void SST_Math_Vec4dMultiply(const SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dMultiplyLocal(SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B);
		void SST_Math_Vec4dScale(const SST_Vec4d* RESTRICT _A,  const double k, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dScaleLocal(SST_Vec4d* RESTRICT _A, const double k);
		void SST_Math_Vec4dDivide(const SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dDivideLocal(SST_Vec4d* RESTRICT _A, const SST_Vec4d* RESTRICT _B);
		void SST_Math_Vec4dAddMult(const SST_Vec4d* RESTRICT _X, const double _x, const SST_Vec4d* RESTRICT _Y, SST_Vec4d* RESTRICT _Z);
		void SST_Math_Vec4dAddMultLocal(SST_Vec4d* RESTRICT _X, const double _x, const SST_Vec4d* RESTRICT _Y);
		void SST_Math_Vec4dLerp(const SST_Vec4d* RESTRICT _X, const SST_Vec4d* RESTRICT _Y, const double _y, SST_Vec4d* RESTRICT _Z);
		void SST_Math_Vec4dLerpLocal(SST_Vec4d* RESTRICT _X, const SST_Vec4d* RESTRICT _Y, const double _y);
		void SST_Math_Vec4dWeightedSum(const SST_Vec4d* RESTRICT _X, const double _x, const SST_Vec4d* RESTRICT _Y, const double _y, SST_Vec4d* RESTRICT _Z);
		void SST_Math_Vec4dWeightedSumLocal(SST_Vec4d* RESTRICT _X, const double _x, const SST_Vec4d* RESTRICT _Y, const double _y);
		bool SST_Math_Vec4dEquals(const SST_Vec4d* RESTRICT _a, const SST_Vec4d* RESTRICT _b, const double _tolerance);
		double SST_Math_Vec4dMax(const SST_Vec4d* RESTRICT _a);
		double SST_Math_Vec4dMin(const SST_Vec4d* RESTRICT _a);
		void SST_Math_Vec4dNormalize(const SST_Vec4d* RESTRICT _in, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dNormalizeLocal(SST_Vec4d* _inout);
		void SST_Math_Vec4dRecipSqrt(const SST_Vec4d* RESTRICT _in, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dRecipSqrtLocal(SST_Vec4d* RESTRICT _a);
		void SST_Math_Vec4dSqrt(const SST_Vec4d* RESTRICT _in, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dSqrtLocal(SST_Vec4d* RESTRICT _a);
		double SST_Math_Vec4dMagnitude(const SST_Vec4d* RESTRICT _a);
		void SST_Math_Vec4dAbs(const SST_Vec4d* RESTRICT _in, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dAbsLocal(SST_Vec4d* RESTRICT _a);
		void SST_Math_Vec4dNegate(const SST_Vec4d* RESTRICT _in, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dNegateLocal(SST_Vec4d* RESTRICT _a);
		void SST_Math_Vec4dRecip(const SST_Vec4d* RESTRICT _in, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dRecipLocal(SST_Vec4d* RESTRICT _a);
		double SST_Math_Vec4dDot(const SST_Vec4d* RESTRICT _a, const SST_Vec4d* RESTRICT _b);
		double SST_Math_Vec4dMagnitudeSquared(const SST_Vec4d* RESTRICT _a);
		void SST_Math_Vec4dProject(const SST_Vec4d* RESTRICT _a, const SST_Vec4d* RESTRICT _b, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dProjectLocal(SST_Vec4d* RESTRICT _a, const SST_Vec4d* RESTRICT _b);
		void SST_Math_Vec4dBias(const SST_Vec4d* RESTRICT _a, const double _bias, SST_Vec4d* RESTRICT _out);
		void SST_Math_Vec4dBiasLocal(SST_Vec4d* RESTRICT _a, const double _bias);

		/*##########################################################
		##  int 
		##########################################################*/
		void SST_Math_Vec4iAdd(const SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iAddLocal(SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B);
		void SST_Math_Vec4iSubtract(const SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iSubtractLocal(SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B);
		void SST_Math_Vec4iMultiply(const SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iMultiplyLocal(SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B);
		void SST_Math_Vec4iScale(const SST_Vec4i* RESTRICT _A,  const int k, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iScaleLocal(SST_Vec4i* RESTRICT _A, const int k);
		void SST_Math_Vec4iDivide(const SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iDivideLocal(SST_Vec4i* RESTRICT _A, const SST_Vec4i* RESTRICT _B);
		void SST_Math_Vec4iAddMult(const SST_Vec4i* RESTRICT _X, const int _x, const SST_Vec4i* RESTRICT _Y, SST_Vec4i* RESTRICT _Z);
		void SST_Math_Vec4iAddMultLocal(SST_Vec4i* RESTRICT _X, const int _x, const SST_Vec4i* RESTRICT _Y);
		void SST_Math_Vec4iLerp(const SST_Vec4i* RESTRICT _X, const SST_Vec4i* RESTRICT _Y, const int _y, SST_Vec4i* RESTRICT _Z);
		void SST_Math_Vec4iLerpLocal(SST_Vec4i* RESTRICT _X, const SST_Vec4i* RESTRICT _Y, const int _y);
		void SST_Math_Vec4iWeightedSum(const SST_Vec4i* RESTRICT _X, const int _x, const SST_Vec4i* RESTRICT _Y, const int _y, SST_Vec4i* RESTRICT _Z);
		void SST_Math_Vec4iWeightedSumLocal(SST_Vec4i* RESTRICT _X, const int _x, const SST_Vec4i* RESTRICT _Y, const int _y);
		bool SST_Math_Vec4iEquals(const SST_Vec4i* RESTRICT _a, const SST_Vec4i* RESTRICT _b);
		int SST_Math_Vec4iMax(const SST_Vec4i* RESTRICT _a);
		int SST_Math_Vec4iMin(const SST_Vec4i* RESTRICT _a);
		void SST_Math_Vec4iAbs(const SST_Vec4i* RESTRICT _in, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iAbsLocal(SST_Vec4i* RESTRICT _a);
		void SST_Math_Vec4iNegate(const SST_Vec4i* RESTRICT _in, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iNegateLocal(SST_Vec4i* RESTRICT _a);
		void SST_Math_Vec4iRecip(const SST_Vec4i* RESTRICT _in, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iRecipLocal(SST_Vec4i* RESTRICT _a);
		int SST_Math_Vec4iDot(const SST_Vec4i* RESTRICT _a, const SST_Vec4i* RESTRICT _b);
		int SST_Math_Vec4iMagnitudeSquared(const SST_Vec4i* RESTRICT _a);
		void SST_Math_Vec4iProject(const SST_Vec4i* RESTRICT _a, const SST_Vec4i* RESTRICT _b, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iProjectLocal(SST_Vec4i* RESTRICT _a, const SST_Vec4i* RESTRICT _b);
		void SST_Math_Vec4iBias(const SST_Vec4i* RESTRICT _a, const int _bias, SST_Vec4i* RESTRICT _out);
		void SST_Math_Vec4iBiasLocal(SST_Vec4i* RESTRICT _a, const int _bias);

		/*##########################################################
		##  unsigned int
		##########################################################*/
		void SST_Math_Vec4uAdd(const SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B, SST_Vec4u* RESTRICT _out);
		void SST_Math_Vec4uAddLocal(SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B);
		void SST_Math_Vec4uSubtract(const SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B, SST_Vec4u* RESTRICT _out);
		void SST_Math_Vec4uSubtractLocal(SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B);
		void SST_Math_Vec4uMultiply(const SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B, SST_Vec4u* RESTRICT _out);
		void SST_Math_Vec4uMultiplyLocal(SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B);
		void SST_Math_Vec4uScale(const SST_Vec4u* RESTRICT _A,  const unsigned int k, SST_Vec4u* RESTRICT _out);
		void SST_Math_Vec4uScaleLocal(SST_Vec4u* RESTRICT _A, const unsigned int k);
		void SST_Math_Vec4uDivide(const SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B, SST_Vec4u* RESTRICT _out);
		void SST_Math_Vec4uDivideLocal(SST_Vec4u* RESTRICT _A, const SST_Vec4u* RESTRICT _B);
		void SST_Math_Vec4uAddMult(const SST_Vec4u* RESTRICT _X, const unsigned int _x, const SST_Vec4u* RESTRICT _Y, SST_Vec4u* RESTRICT _Z);
		void SST_Math_Vec4uAddMultLocal(SST_Vec4u* RESTRICT _X, const unsigned int _x, const SST_Vec4u* RESTRICT _Y);
		void SST_Math_Vec4uLerp(const SST_Vec4u* RESTRICT _X, const SST_Vec4u* RESTRICT _Y, const unsigned int _y, SST_Vec4u* RESTRICT _Z);
		void SST_Math_Vec4uLerpLocal(SST_Vec4u* RESTRICT _X, const SST_Vec4u* RESTRICT _Y, const unsigned int _y);
		void SST_Math_Vec4uWeightedSum(const SST_Vec4u* RESTRICT _X, const unsigned int _x, const SST_Vec4u* RESTRICT _Y, const unsigned int _y, SST_Vec4u* RESTRICT _Z);
		void SST_Math_Vec4uWeightedSumLocal(SST_Vec4u* RESTRICT _X, const unsigned int _x, const SST_Vec4u* RESTRICT _Y, const unsigned int _y);
		bool SST_Math_Vec4uEquals(const SST_Vec4u* RESTRICT _a, const SST_Vec4u* RESTRICT _b);
		unsigned int SST_Math_Vec4uMax(const SST_Vec4u* RESTRICT _a);
		unsigned int SST_Math_Vec4uMin(const SST_Vec4u* RESTRICT _a);
		unsigned int SST_Math_Vec4uDot(const SST_Vec4u* RESTRICT _a, const SST_Vec4u* RESTRICT _b);
		unsigned int SST_Math_Vec4uMagnitudeSquared(const SST_Vec4u* RESTRICT _a);
		void SST_Math_Vec4uProject(const SST_Vec4u* RESTRICT _a, const SST_Vec4u* RESTRICT _b, SST_Vec4u* RESTRICT _out);
		void SST_Math_Vec4uProjectLocal(SST_Vec4u* RESTRICT _a, const SST_Vec4u* RESTRICT _b);
		void SST_Math_Vec4uBias(const SST_Vec4u* RESTRICT _a, const unsigned int _bias, SST_Vec4u* RESTRICT _out);
		void SST_Math_Vec4uBiasLocal(SST_Vec4u* RESTRICT _a, const unsigned int _bias);
#ifdef __cplusplus
}
#endif
#if SST_COMPILER == SST_COMPILER_MSVC
#pragma warning(default:4201)
#endif
#endif
